<?php

function custom_twicks_menu() { //views - cash-inflow-chart 

  $items['user/edit'] = array(
      'type' => MENU_CALLBACK,
      'page callback' => 'custom_twicks_user_edit_redirect',
      'access callback' => 'user_is_logged_in',
  ); 
  
  /*
  $items['candidate/register'] = array(
    'title' => 'Create new account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_register_form'),
    'access callback' => 'user_register_access',
    'type' => MENU_CALLBACK,
  );
  */
  
  return $items; 
}

/**
 * Implements hook_js_alter().
 */
function custom_twicks_js_alter(&$javascript) { 
    if(arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'evaluation' ) {//&& arg(3) != ''
        unset($javascript['misc/tabledrag.js']);
    }
}

function custom_twicks_init() { 
  global $user; 
  
   if(arg(0) == 'user' && arg(1) == 'logout' && $user->uid == 0 )  {
   	   drupal_goto('user/login'); 
  	   exit;
    } 
    
    
  if(arg(0) == 'invite' && arg(1) == 'add' && arg(2) == 'invite_by_email' ){ 
    drupal_set_title("Recommend a Candidate Profile"); 
  }
  
  if(arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'evaluation' && arg(3) != '') {  
  	    
    	$query = new EntityFieldQuery; 
	    $query->entityCondition('entity_type', 'node')
	      ->entityCondition('bundle', 'evaluation')
	      ->fieldCondition('field_user_id', 'target_id', arg(3) )
	      ->fieldCondition('field_recruiter_id', 'value', $user->uid);
	    
	    $results = $query->execute();
	    
	    $recruiter_id = ""; $evaluated_node_id = ''; 
	    $is_evaluated = false; 
	    if (isset($results['node']) && count($results['node'])) {
	       $is_evaluated = true;
	       $list_evaluated_nodes =array_keys($results['node']); 
	       $evaluated_node_id = $list_evaluated_nodes[0]; 
	       
	       drupal_goto('node/'.$evaluated_node_id.'/edit');
	    }
  	
  }
  
  //check if recruiter invited and trying to register 
  if(arg(0) == 'candidate' && arg(1) == 'register') { 
      if ( ($invite = invite_load_from_session()) && !empty($invite->type_details()->invite_sending_controller['invite_by_email'])) {
        //$invite_wrapper = entity_metadata_wrapper('invite', $invite);
        //print_r($invite);
        if($invite->type == 'invite_recruiter') { 
            drupal_goto('user/register'); 
        }
      }  
  } 
  
  //$relationships_profile_conn_list = user_relationships_load(array('requester_id' => $user->uid )); 
  //print_r($relationships_profile_conn_list);
  
}


function custom_twicks_node_insert($node) {
  if($node->type=='evaluation')  {
     update_user_latest_eval($node); 
  } 
}

function custom_twicks_node_update($node) {
    update_user_latest_eval($node); 
}

function update_user_latest_eval($node) { 
	
  // save evaluation latest to user profile2 
  if($node->type=='evaluation')  { 
  	
    $canid = $node->field_user_id['und'][0]['target_id'];  
    
    // load this candidates profile2 - type - evaluation 
    $c_user = user_load($canid); 
    
	//print_r($profile_evaluation); exit; 
	
	//loop through nodes data __ 
	//print_r($node); exit;
    if($node->field_skills_rating['und']) {
    	
    	$profile_evaluation = profile2_load_by_user($c_user, 'evaluation');  
    	
	    if($profile_evaluation) { //create if not exist 
	    } else {
		   $profile_evaluation = profile2_create(array('type' => 'evaluation', 'uid' => $c_user->uid));
		}
		
    	foreach($node->field_skills_rating['und'] as $ck => $skill_col) {
    		//value
    		$i =$ck; 
    		$nfcid =  $skill_col['value'];  
    		if($nfcid) { 
	            $nsp_fc_item = entity_load('field_collection_item', array($nfcid)); 
	           // $nfc_wrapper = entity_metadata_wrapper('field_collection_item', $nsp_fc_item[$nfcid]);
	           $skill_data = $nsp_fc_item[$nfcid]; 
	           $term_id = $skill_data->field_skills['und'][0]['tid']; 
	           $rating  = $skill_data->field_skill_1['und'][0]['rating']; 
		       
		     // print_r($nsp_fc_item); exit; 
		      
		      //check if user evaluation has any existing data for this key 
		      if( $profile_evaluation->field_skills_rating && isset($profile_evaluation->field_skills_rating['und'][$i]) &&  $profile_evaluation->field_skills_rating['und'][$i]['value'] != '' ) { 
		      	$fcid =  $profile_evaluation->field_skills_rating['und'][$i]['value']; 
			      if($fcid) { 
		            $sp_fc_item = entity_load('field_collection_item', array($fcid)); 
		          
		            $fc_wrapper = entity_metadata_wrapper('field_collection_item', $sp_fc_item[$fcid]);
			      } 
		      }else { 
			    $sp_fc_item = entity_create('field_collection_item', array('field_name' => 'field_skills_rating'));
		    	
		    	$sp_fc_item->setHostEntity('profile2', $profile_evaluation); 
	
				$fc_wrapper = entity_metadata_wrapper('field_collection_item', $sp_fc_item); 
	          }  
	         // print_r($fc_wrapper); exit;
	          $term_data = taxonomy_term_load($term_id); // print_r($term_data); exit;
 	          //$fc_wrapper->field_skills['und'][0]['tid'] = $term_id; 
	          //$fc_wrapper->field_skill_1['und'][0]['rating'] = $term_id;  
	          
		      if($term_id)
		        $fc_wrapper->field_skills->set($term_id);  
		        
		      if($rating)
		        $fc_wrapper->field_skill_1->set(array($rating));  
		      
		      $fc_wrapper->save(TRUE); 
		      
		      $profile_evaluation->field_skills_rating['und'][$i]['value'] = $fc_wrapper->getIdentifier();  
		      
    		}
		      
    		
    	} //end for 
    	
    	//update soft skills 
    	$profile_evaluation->field_sskill_1_rating['und'][0] = $node->field_sskill_1_rating['und'][0]; 
    	$profile_evaluation->field_sskill_2_rating['und'][0] = $node->field_sskill_2_rating['und'][0]; 
    	$profile_evaluation->field_sskill_3_rating['und'][0] = $node->field_sskill_3_rating['und'][0]; 
    	$profile_evaluation->field_sskill_4_rating['und'][0] = $node->field_sskill_4_rating['und'][0]; 
    	$profile_evaluation->field_sskill_5_rating['und'][0] = $node->field_sskill_5_rating['und'][0]; 
    	
    	
    	//check for other  remove extra 
        $has_total =	count($profile_evaluation->field_skills_rating['und']); 
        $new_total = count($node->field_skills_rating['und']); 
    	 if($new_total < $has_total) {
    	 	//need to delete some.. 
    	 	$diff = $has_total - $new_total; 
    	 	//0-.. todo 
    	 	
    	 }
    	 
    	 profile2_save($profile_evaluation);
    	 
    	// print_r($profile_evaluation);exit;
    	
    }
    
  }
}


 function custom_twicks_form_alter(&$form, &$form_state, $form_id) {
    	global $user;
    	
    	if ($form_id == "user_profile_form" ) {
    	    //print_r($form); 
    	    //print_r(array_keys($form['field_city']['und'][0])); 
    	   // $form['field_city']['und'][0]['#required'] = true;
     	   //$form['field_city']['und'][0]['#attributes']['required'] = '';
     	   
     	   $form['field_city']['und'][0]['value']['#required'] = TRUE; 
     	   
     	   $form['field_last_name']['und'][0]['value']['#required'] = TRUE; 
     	   $form['field_zip_code']['und'][0]['value']['#required'] = TRUE; 
     	   $form['field_college_university']['und'][0]['value']['#required'] = TRUE; 
     	   //print_r($form['field_experience']['und']);
     	   $form['field_experience']['und']['#required'] = TRUE; 
     	   $form['field_job_title']['und']['#required'] = TRUE; 
     	   $form['field_expertise']['und']['#required'] = TRUE; //function 
     	   $form['field_degree_type']['und']['#required'] = TRUE; 
     	   $form['field_company_size']['und']['#required'] = TRUE; 
     	   $form['field_company_present']['und']['#required'] = TRUE; 
     	   //$form['field_company_past']['und'][0]['value']['#required'] = TRUE; 
     	   $form['field_industry']['und']['#required'] = TRUE; 
     	   
     	   //field_experience[und] 
     	   //field_last_name[und][0][value]
     	   //field_zip_code[und][0][value]
     	   // field_job_title[und]
     	   //field_interests[und][0][value] xx
     	   //field_expertise[und]
     	   //field_degree_type[und]
     	   //field_college_university[und][0][value]
     	   //field_company_size[und]
     	   //field_company_present[und]
     	   //field_company_past[und]
     	   //field_industry[und]
     	   
     	   
     	   
    	}
    	
    	if ($form_id == "views_exposed_form" && $form['#id'] == "views-exposed-form-searchapi-candidate-page") {
    	   // print_r($form);
    	   $options = array(); 
    	   
    	       $parents = taxonomy_get_tree($vid = 8, $parent = 0, $max_depth = 1); 
    	       foreach ($parents as $term) {
                  $options[$term->name] = array();
                  $children = taxonomy_get_tree($term->vid, $term->tid);
            
                  foreach ($children as $child) {
                    $options[$term->name][$child->tid] = $child->name;
                  }
                }
                
    	   
    	   $form['field_role_department']['#options'] = $options; 
    	   
    	    //make muliselect 
    	    //$form['field_experience']['#attributes']['class'][] = 'chosen-select';
    	    
    	    
    	} 
    	
    	if($form_id == "evaluation_node_form"){
    	    //validate this user id __ 
    	    $idgetcan = arg(3);
    	    if(arg(2) == 'edit' && $idgetcan == '') { 
    	    	$node = $form['#node']; //print_r($form); 
				$idgetcan = $node->field_user_id['und'][0]['target_id']; 
    	    }
    	     $relationships = user_relationships_load(array('requester_id' => $user->uid, 'requestee_id' => $idgetcan, 'approved' => 1 )); 
          if(count($relationships) == 0 && $user->uid != 1) { //pending_  
              drupal_set_message("You do not have permission to create evaluation for selected candidate"); 
              drupal_goto('searchapi-candidate');
          }
 
           $user_can = user_load($idgetcan); 
           
				$username_candidate = $user_can->name;
			    $full_name_candidate = $username_candidate; 
			    
				  if (!empty($user_can->field_first_name) ) {//&& !empty($users->field_last_name)
				    $full_name_candidate = $user_can->field_first_name['und'][0]['value'] . ' ' . $user_can->field_last_name['und'][0]['value'];
				  }
				
				if(arg(1) == 'add') 
				  $form['title']['#default_value'] = $username_candidate; //''.$user->name.'-'.
				
    	    $form['title']['#type'] = "hidden";
    	    if($user->uid != 1) { 
				$form['field_user_id']['#type'] = "hidden";
				$form['field_recruiter_id']['#type'] = "hidden";
    	    }
    	    
			$form['evaluation_form_title'] = array(
			 '#type' => 'markup',
			 '#markup' => '<h1 class="content-title">EVALUATION FORM</h1>',
			 '#weight' => -15
			); 
			
			$form['can_title'] =  array(
			 '#type' => 'markup',
			 '#markup' =>  '<h3>Candidate - '.l( $full_name_candidate, 'user/'.$idgetcan, array(  'attributes'=>array( 'target'=>'_blank'))  ).'</h3>', 
			 '#weight' => -10
			);
			
			
			
    	}
    	
    	if($form_id == "invite_form"){
    		if(arg(2) == 'invite_by_email') { 
    			//print_r($form); 
    			$form['actions']['submit']['#value'] = 'Recommend';
    			drupal_set_title("Recommend a Candidate Profile"); 
    		}
    		else if(arg(2) == 'invite_recruiter') { 
    			//print_r($form['actions']); 
    			$form['actions']['submit']['#value'] = 'Refer your colleague';
    			drupal_set_title("Refer a recruiter"); 
    		}
    	}
    	
    	if($form_id == "user_relationships_ui_request"){
    			if(arg(0) == 'relationship' && arg(2) == 'request') { 
    			//print_r($form); 
    		
    			drupal_set_title("Engage Candidate"); 
    		}
    	}
    	
 }
 
 function custom_twicks_node_presave($node) {
        global $user;
        //make sure it works only on add case ___ node/add/evaluation/226   node/id/edit 
        $idgetcan = arg(3);  //check if this user has relation ___
        
        //print_r($node); exit; 
        $type = is_string($node) ? $node : $node->type;
        if ($idgetcan && $type == 'evaluation' && arg(2) != 'edit') //add case only__
        {  
            $relationships = user_relationships_load(array('requester_id' => $user->uid, 'requestee_id' => $idgetcan, 'approved' => 1 )); 
  			//print_r($relationships); 
            //$form['field_recruiter_id']['und'][0]['value']['#default_value'] = $user->uid;
            $node->field_recruiter_id['und'][0]['value'] = $user->uid;
            $node->field_user_id['und'][0]['target_id'] = $idgetcan; //entity 
        }
    }
    
function custom_twicks_info() { 
	global $user; 
	
	if($user->uid == 0 && arg(0) == 'user' && arg(1) == '') { 
		drupal_goto('user/login'); 
	}
}

function custom_twicks_user_edit_redirect() { 
  global $user; 
    
    if($user->uid) { 
      drupal_goto('user/'.$user->uid.'/edit'); 
    }
}

function custom_twicks_username_alter(&$name, $account) {
/* load the full user object, since $account not always provide all informations */  
  $user = user_load($account->uid);
/* 
field_extract_value(): function provided by field_extract module (thanks adaddinsane!)
 */
  if (!empty($user->field_first_name) && !empty($user->field_last_name)) {
    $name = $user->field_first_name['und'][0]['value'] . ' ' . $user->field_last_name['und'][0]['value'];
  }
}

/**
 * Implements hook_connector_action_alter().
 *
 * We change the default connector to redirect to our own action.
 */
function custom_twicks_connector_action_alter(&$connector_actions) { //url differnt __ 
  $connector_actions['default']['create account callback'] = '_cz_connector_create_account'; 
  
} // add connection or create account callback ? 

function _cz_connector_create_account($connector_name, $cid = NULL, $consumer = NULL, $access_token = NULL, $request_token = NULL) { 
  global $user; //hopefully anonymous 
  
  //before import fetch email field__ 
  $connector = _connector_get_connectors($connector_name);
  if (!$connector) {
    return FALSE;
  }
  $authname = $connector_name . '__' . $cid;
  
  if (variable_get('user_register', 1)) {
    $userinfo = array(
      'name' => $authname,
      'pass' => user_password(),
      'init' => $authname,
      'status' => variable_get('user_register', 1) == 1,
      'access' => REQUEST_TIME, 
			'roles' => array(
			    DRUPAL_AUTHENTICATED_RID => 'authenticated user',
    			//5 => 'custom role',
			  ),
    ); 
    
    //reset this role if invited __ 
    //$userinfo['roles'][5] - recruiter role__ 
    if( isset($_SESSION['invite_code']) && $_SESSION['invite_code'] ) { //what type of invitation?? 
        //this is candidate role -- 
        $userinfo['roles'][6] = 'candidate'; 
    } else {
        $userinfo['roles'][8] = 'recruiter free';   //new recruiter account need payment.. 
    }
    
    // Try to assign values from connection. 
    $info = array();
    if (!empty($connector['information callback']) && is_callable($connector['information callback'])) {
      $info = $connector['information callback']($connector, $cid, array(), $access_token);
    }
    
    watchdog('custom_twicks', "info Data register -".print_r($info, true) .print_r($_SESSION, true) , array(), WATCHDOG_NOTICE);  
    
    $allowed_fields = array('name', 'mail');  
    //'field_linkedin_user_id', 'field_first_name', 'field_interests', 'field_last_name', 'field_picture_url', 'field_summary'
    
    foreach ($info as $field) {
      if (isset($field['sync']) && $field['sync'] && in_array($field['sync'], $allowed_fields)) {
        $exists = db_select('users', 'u')
          ->fields('u')
          ->condition($field['sync'], $field['value'])
          ->execute()
          ->rowCount();   //list for validation 
        if ($exists < 1) {
          $userinfo[$field['sync']] = $field['value'];
        }
      }
      
      if(isset($field['sync'])) { 
          $fldname = $field['sync'];  
          //try save field as profile field 
          if(!is_array($field['value']) && is_string($field['sync']) && isset($field['sync']) && $field['sync'] && !isset($userinfo[$fldname]) ) { 
              
            $userinfo[$fldname]['und'][0]['value'] = $field['value']; 
          }
      }
    }
    
    $new_account = user_save('', $userinfo); 
    // Terminate if an error occured during user_save().
    
    if (!$new_account) {
      drupal_set_message(t("Error saving user account."), 'error');
    } else {
      watchdog('user', 'New external user: %name using module %module.', array('%name' => $authname, '%module' => 'connector'), WATCHDOG_NOTICE, l(t('edit'), 'user/' . $new_account->uid . '/edit'));
      return $new_account;
    }
  }
  else {
    drupal_set_message(t('Only site administrators can create new user accounts.'), 'error');
    if (isset($connector['logout callback']) && is_callable($connector['logout callback'])) {
      call_user_func($connector['logout callback'], $connector, $connection->cid);
    }
  }
}



function cz_user_update_picture($file, $account) { 
  $file->fid = $file->fid;
  $file->filename = $file->filename;
  if($file->fid) {
    $edit = array(); 
    $file->uid = $account->uid; // need file save again ? 
    
    db_update('file_managed')
      ->fields(array(
      'uid' => $account->uid,
      ))->condition('fid', $file->fid)->execute();
    
    //file_usage_add($file, 'user', 'user', $account->uid);
    
    db_update('users')
      ->fields(array(
      'picture' => $file->fid,
      ))->condition('uid', $account->uid)->execute();
    
  } 
} 

